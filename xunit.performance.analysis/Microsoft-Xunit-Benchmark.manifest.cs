using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftXunitBenchmark;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    public sealed class MicrosoftXunitBenchmarkTraceEventParser : TraceEventParser
    {
        public static string ProviderName = "Microsoft-Xunit-Benchmark";
        public static Guid ProviderGuid = new Guid(unchecked((int)0xa3b447a8), unchecked((short)0x6549), unchecked((short)0x4158), 0x9b, 0xad, 0x76, 0xd4, 0x42, 0xa4, 0x70, 0x61);
        public enum Keywords : long
        {
            Session3 = 0x100000000000,
            Session2 = 0x200000000000,
            Session1 = 0x400000000000,
            Session0 = 0x800000000000,
        };

        public MicrosoftXunitBenchmarkTraceEventParser(TraceEventSource source) : base(source) { }

        public event Action<BenchmarkExecutionStartArgs> BenchmarkExecutionStart
        {
            add
            {
                source.RegisterEventTemplate(BenchmarkExecutionStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<BenchmarkExecutionStopArgs> BenchmarkExecutionStop
        {
            add
            {
                source.RegisterEventTemplate(BenchmarkExecutionStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<EventSourceMessageArgs> EventSourceMessage
        {
            add
            {
                source.RegisterEventTemplate(EventSourceMessageTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 0, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private BenchmarkExecutionStartArgs BenchmarkExecutionStartTemplate(Action<BenchmarkExecutionStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BenchmarkExecutionStartArgs(action, 1, 1, "BenchmarkExecution", Guid.Empty, 1, "Start", ProviderGuid, ProviderName);
        }
        static private BenchmarkExecutionStopArgs BenchmarkExecutionStopTemplate(Action<BenchmarkExecutionStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new BenchmarkExecutionStopArgs(action, 2, 1, "BenchmarkExecution", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName);
        }
        static private EventSourceMessageArgs EventSourceMessageTemplate(Action<EventSourceMessageArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new EventSourceMessageArgs(action, 0, 65534, "EventSourceMessage", Guid.Empty, 0, "", ProviderGuid, ProviderName);
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[3];
                templates[0] = EventSourceMessageTemplate(null);
                templates[1] = BenchmarkExecutionStartTemplate(null);
                templates[2] = BenchmarkExecutionStopTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftXunitBenchmark
{
    public sealed class BenchmarkExecutionStartArgs : TraceEvent
    {
        public string RunId { get { return GetUnicodeStringAt(0); } }
        public string BenchmarkName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Iteration { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }

        #region Private
        internal BenchmarkExecutionStartArgs(Action<BenchmarkExecutionStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 4));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BenchmarkExecutionStartArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "RunId", RunId);
            XmlAttrib(sb, "BenchmarkName", BenchmarkName);
            XmlAttrib(sb, "Iteration", Iteration);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RunId", "BenchmarkName", "Iteration" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RunId;
                case 1:
                    return BenchmarkName;
                case 2:
                    return Iteration;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BenchmarkExecutionStartArgs> m_target;
        #endregion
    }
    public sealed class BenchmarkExecutionStopArgs : TraceEvent
    {
        public string RunId { get { return GetUnicodeStringAt(0); } }
        public string BenchmarkName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
        public int Iteration { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
        public bool Success { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0)) + 4) != 0; } }

        #region Private
        internal BenchmarkExecutionStopArgs(Action<BenchmarkExecutionStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(SkipUnicodeString(0)) + 8));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(SkipUnicodeString(0)) + 8));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<BenchmarkExecutionStopArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "RunId", RunId);
            XmlAttrib(sb, "BenchmarkName", BenchmarkName);
            XmlAttrib(sb, "Iteration", Iteration);
            XmlAttrib(sb, "Success", Success);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "RunId", "BenchmarkName", "Iteration", "Success" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return RunId;
                case 1:
                    return BenchmarkName;
                case 2:
                    return Iteration;
                case 3:
                    return Success;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<BenchmarkExecutionStopArgs> m_target;
        #endregion
    }
    public sealed class EventSourceMessageArgs : TraceEvent
    {
        public string message { get { return GetUnicodeStringAt(0); } }

        #region Private
        internal EventSourceMessageArgs(Action<EventSourceMessageArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 0 && EventDataLength != SkipUnicodeString(0)));
            Debug.Assert(!(Version > 0 && EventDataLength < SkipUnicodeString(0)));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<EventSourceMessageArgs>)value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
            Prefix(sb);
            XmlAttrib(sb, "message", message);
            sb.Append("/>");
            return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "message" };
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return message;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<EventSourceMessageArgs> m_target;
        #endregion
    }
}
